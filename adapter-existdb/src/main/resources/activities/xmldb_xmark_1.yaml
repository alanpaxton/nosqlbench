description: |
  This workload fills an xmldb: database with a file generated by xmlgen or xmlgen2
  We need to have a running xmldb, such as exist
  # Debug exist-db/startup.sh by adding this to java invocation:
  #     -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=127.0.01:4005
  # Run using this command:
  #     java -jar ./nb5/target/nb5.jar ./adapter-existdb/target/classes/activities/xmldb_xmark_1.yaml

scenarios:
  reset:
    # existdb driver is effectively a generic xmldb driver
    schema:   run driver=existdb tags==block:"schema.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

  default:
    # existdb driver is effectively a generic xmldb driver
    schema:   run driver=existdb tags==block:"schema.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

    # existdb driver is effectively a generic xmldb driver
    install:   run driver=existdb tags==block:"install.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

    # Repeat the read n times (total), with m concurrent threads
    read:     run driver=existdb tags==block:"read.*",  cycles===TEMPLATE(read-cycles,10000) threads=auto errors=timer,warn endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

bindings:

  collection: FixedValue(<<collection:"db">>) -> String
  user: FixedValue(TEMPLATE(user,"admin")) -> String
  pass: FixedValue(TEMPLATE(pass,"")) -> String
  path: FixedValue(TEMPLATE(path,"/Users/alan/swProjects/evolvedBinary/nosqlbench")) -> String
  activities: FixedValue(TEMPLATE(activities,"adapter-existdb/target/classes/activities")) -> String

  cycleNum: Identity();
  personNum: Identity(); HashRange(0,TEMPLATE(personcount));

blocks:

  schema:
    ops:
      drop-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $clean := if (fn:contains(xmldb:get-child-collections("/{collection}"), "auction"))
            then
                xmldb:remove("/db/auction")
            else
                ()
        return $clean

      create-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $create-collection := xmldb:create-collection("/{collection}", "auction")
        let $create-collection-xmlgen := xmldb:create-collection("/{collection}/auction", "xmlgen")
        let $create-collection-xmlgen2 := xmldb:create-collection("/{collection}/auction", "xmlgen2")

        return
          ($create-collection-xmlgen, $create-collection-xmlgen2)

  install:
    ops:
      install-auction:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")
        let $indexes := xmldb:store-files-from-pattern("/{collection}/system/config/{collection}", "{path}/{activities}", "collection.xconf")
        let $docs := xmldb:store-files-from-pattern("/{collection}/auction/xmlgen2", "{path}/{activities}", "TEMPLATE(auctionfile)")
        return $docs

  read:
    ops:
      xmark-001:
        xquery version "3.1";

        for $b in /site/people/person[@id="person{personNum}"]
        return $b/name/text()

        