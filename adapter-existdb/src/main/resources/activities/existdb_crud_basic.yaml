
description: |
  This workload generates CRUD operations for direct access to an xmldb: database (eXist-db in the first instance).
  It was derived ultimately from the existing CRUD Basic workflow examples in nb5.
  The write phase simulates the generation of user entries.
  It is only partial; create and write are implemented. Read, update and delete are not yet supplied.

scenarios:
  default:
    #
    schema:   run driver=existdb tags==block:"schema.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

    # different ops in the "write" schema occur on intervals, at the ratios declared by the ops
    write:    run driver=existdb tags==block:"write.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,1000)) seq=interval threads=auto errors=timer,warn endpoint=xmldb:exist://localhost:8080/exist/xmlrpc
    
    # read:     run driver=existdb tags==block:"read.*",  cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
    # update:   run driver=existdb tags==block:"update.*", cycles===TEMPLATE(update-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
    # delete:   run driver=existdb tags==block:"delete.*", cycles===TEMPLATE(delete-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
 
bindings:

  collection: FixedValue(<<collection:"db">>) -> String
  user: FixedValue(<<user:"admin">>) -> String
  pass: FixedValue(<<pass:"">>) -> String

  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  gender: WeightedStrings('M:10;F:10;O:1')

  text: WarAndPeace()
  alttext: WarAndPeace()
  
  # The native FullNames() method doesn't give us the same last name as LastNames()
  full_name: ListSized(FixedValue(2), FirstNames(), LastNames()); Join(' ')
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String
          
blocks:

  schema:
    ops:
      drop-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $clean := if (fn:contains(xmldb:get-child-collections("/db"), "testnb"))
            then
                xmldb:remove("/db/testnb")
            else
                ()
        return $clean

      create-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $create-collection := xmldb:create-collection("/db", "testnb")
        let $create-collection-alpha := xmldb:create-collection("/db/testnb", "alpha")
        let $create-collection-beta := xmldb:create-collection("/db/testnb", "beta")

        return
          ($create-collection-alpha, $create-collection-beta)

  write:
    ops:
      write-node-alpha:
        ratio: 1
        # start-timers: write-alpha
        # stop-timers: write-alpha
        op: >2
          xquery version "3.1";

          import module namespace xmldb="http://exist-db.org/xquery/xmldb";

          declare namespace ppl = "https://evolvedbinary.co.uk/people/";

          let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

          let $record :=
            <person id="{user_id}" seq="{seq_key}" creation="{created_on}">
              <name>{full_name}</name>
              <family>
                <gender>{gender}</gender>
                <married>{married}</married>
              </family>
              <address>
                <city>{city}</city>
                <country>{country_code}</country>
                <location lat="{lat}" lng="{lng}"/>
              </address>
              <text>{text}</text>
            </person>

          return
            xmldb:store("/db/testnb/alpha", "{random_key}", $record)

      write-node-beta:
        ratio: 4
        # start-timers: write-beta
        # stop-timers: write-beta
        op: >2
          xquery version "3.1";

          import module namespace xmldb="http://exist-db.org/xquery/xmldb";

          declare namespace ppl = "https://evolvedbinary.co.uk/people/";

          let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

          let $record :=
            <person id="{user_id}" seq="{seq_key}">
              <name>John Doe</name>
              <text>{alttext}</text>
            </person>

          return
            xmldb:store("/db/testnb/beta", "{random_key}", $record)

  read:
    ops:
      read-document: >2
        "the read-document op is not yet implemented"

  update:
    ops:
      update-document: >2
        "the update-document op is not yet implemented"

  delete:
    ops:
      delete-document: >2
        "the delete-document op is not yet implemented"
