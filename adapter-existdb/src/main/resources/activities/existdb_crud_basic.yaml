
description: |
  This workload does 2 different things for eXist-db (or ultimately, any xmldb)
    - It generates XML documents in bulk for loading into a DB.
    - It generates CRUD operations for direct access to the database.
  It was derived ultimately from the existing CRUD Basic workflow examples in nb5.

scenarios:
  default:
    #
    schema:   run driver=existdb tags==block:"schema.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

    # different ops in the "write" schema occur on intervals, at the ratios declared by the ops
    write:    run driver=existdb tags==block:"write.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,100000)) seq=interval threads=auto errors=timer,warn endpoint=xmldb:exist://localhost:8080/exist/xmlrpc
    
    # read:     run driver=existdb tags==block:"read.*",  cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
    # update:   run driver=existdb tags==block:"update.*", cycles===TEMPLATE(update-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
    # delete:   run driver=existdb tags==block:"delete.*", cycles===TEMPLATE(delete-cycles,TEMPLATE(docscount,10)) threads=auto errors=timer,warn
 
  create:
    schema:   run driver=existdb tags==block:"schema.*" threads==1 cycles==UNDEF endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

  debugstdout:
    dbgwrite:    run driver=stdout tags==block:"dbgwrite.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10)) seq=interval threads=auto errors=timer,warn

  existdb:
    write:    run driver=existdb tags==block:"write.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) seq=interval threads=auto errors=timer,warn endpoint=xmldb:exist://localhost:8080/exist/xmlrpc

  xmlgen:
    genitems:    run driver=xmlgen tags==block:"genauctionitems.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) seq=interval threads=auto errors=timer,warn directorypath=./target/xml-generated-items xmlroot=site
    genpeople:    run driver=xmlgen tags==block:"genauctionpeople.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) seq=interval threads=auto errors=timer,warn directorypath=./target/xml-generated-people xmlroot=site

bindings:

  collection: FixedValue(<<collection:"db">>) -> String
  user: FixedValue(<<user:"admin">>) -> String
  pass: FixedValue(<<pass:"">>) -> String

  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  gender: WeightedStrings('M:10;F:10;O:1')
  full_name: FullNames()
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String
  email: ListHashed(LastNames(), AlphaNumericString(16), FixedValue("@"), AlphaNumericString(4), FixedValue("."), WeightedStrings('com:10;org:8;co.uk:1')); Join('')
          

  # distribute generated XML over 1000 files, weighted heavily to the first few
  # via use of the exponential. With a rate parameter of 0.01, (mean == 1/rate == 100)
  # PD (probability density) for x=10 tells us 9.5% of data lands in the first 10 files
  # PD x=1 -> 0.01, x=10 -> 0.095, x=100 -> 0.632, x=1000 -> 0.9999
  xml_file_id: Exponential(100); ModuloToLong(1000)

  # For item generation
  item_quantity: Hash(); Exponential(10); ModuloToLong(10); Add(1)
  item_name: ListSizedHashed(Zipf(100,1.2), CitiesByPopulation(), StateNamesByPopulation()); Join(' ')
  payment_options: SetSizedHashed(HashRange(1,4),WeightedStrings('Cash:20;Personal check:8;Creditcard:4;Money order:2')); Join(', ')
  email_date: Hash(); Uniform(0,30000000); ToDate(86400000,1440); ToString()
  shipping_options: Hash(); WeightedStrings('Will ship only within country:2;Will ship only within country, Buyer pays fixed shipping charges, See description for charges:1;Will ship internationally:1')

blocks:

  schema:
    ops:
      drop-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $clean := if (fn:contains(xmldb:get-child-collections("/db"), "testnb"))
            then
                xmldb:remove("/db/testnb")
            else
                ()
        return $clean

      create-collection:
        xquery version "3.1";

        import module namespace xmldb="http://exist-db.org/xquery/xmldb";

        let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

        let $create-collection := xmldb:create-collection("/db", "testnb")
        let $create-collection-alpha := xmldb:create-collection("/db/testnb", "alpha")
        let $create-collection-beta := xmldb:create-collection("/db/testnb", "beta")

        return
          ($create-collection-alpha, $create-collection-beta)

  write:
    ops:
      write-node-alpha:
        ratio: 1
        # start-timers: write-alpha
        # stop-timers: write-alpha
        op: >2
          xquery version "3.1";

          import module namespace xmldb="http://exist-db.org/xquery/xmldb";

          declare namespace dasg = "https://dasg.ac.uk/corpus/";

          let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

          let $record :=
            <text xmlns="https://dasg.ac.uk/corpus/" ref="https://dasg.ac.uk/corpus/_8-0" status="raw" seq="{seq_key}" user="{user_id}">
              <pb n="5"/>
              <h>
                <w id="d1e1067" pos="ax" lemma="ro">RO</w>
                <pc join="both">-</pc>
                <w id="d1e1073" pos="vn" lemma="abair">RADH</w>
              </h>
              <p>
                <w id="d1e1079" pos="p" lemma="bho">Bho</w>
                <w id="d1e1082" pos="V" lemma="rach">chaidh</w>
                <w id="d1e1085" pos="N" lemma="Hiort">Hiort</w>
                <w id="d1e1088" pos="" lemma="fhàsachadh">fhàsachadh</w>
                <w id="d1e1091" pos="p" lemma="an">ann an</w>
              </p>
            </text>

          return
            xmldb:store("/db/testnb/alpha", "{random_key}", $record)

      write-node-beta:
        ratio: 4
        # start-timers: write-beta
        # stop-timers: write-beta
        op: >2
          xquery version "3.1";

          import module namespace xmldb="http://exist-db.org/xquery/xmldb";

          declare namespace dasg = "https://dasg.ac.uk/corpus/";

          let $mylogin := xmldb:login("/{collection}", "{user}", "{pass}")

          let $record :=
            <text xmlns="https://dasg.ac.uk/corpus/" ref="https://dasg.ac.uk/corpus/_8-0" status="raw" seq="{seq_key}" user="{user_id}">
              <pb n="5"/>
              <h>
                <w id="d1e1067" pos="ax" lemma="ro">RO</w>
                <pc join="both">-</pc>
                <w id="d1e1073" pos="vn" lemma="abair">RADH</w>
              </h>
              <p>
                <w id="d1e1079" pos="p" lemma="bho">air</w>
              </p>
            </text>

          return
            xmldb:store("/db/testnb/beta", "{random_key}", $record)

  genflatexamples:
    ops:
      generate-flat-xml:
        command: element
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        # currently only generating elements at top level
        element: "w"
        attrs:
          { uid: "{user_id}",
            count: "{{Identity()}}",
            pos: "{{WeightedStrings('c:20;z:8;n:4;p:2;d;Dx:3')}}",
            first: "{{FirstNames()}}",
            last: "{{LastNames()}}",
            full: "{{FullNames()}}",
            city: "{{CitiesByPopulation()}}",
            map: "{{MapSizedStepped(Zipf(100,2), Identity(), NumberNameToString())}}",
            s: "{{NumberNameToString()}}",
          }
        body: "{{MobyDick()}}"
        count: "{{Identity()}}"
        ratio: 4

  genauctionpeople:
    ops:
      generate-person:
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        path: ["people", "person"]
        attrs:
          { id: "person{{Identity()}}",
            city: "{{CitiesByPopulation()}}",
          }
        children: {
          name: "{{FullNames()}}",
          email: "{email}",
          # education: "{{WeightedStrings('Other:3,High School:10,College:10,Graduate School:4'}}",
          business: "{{WeightedStrings('Yes:1,No:2')}}",
        }
        ratio: 2
        op: >2
          "generate person op - required by the system - we don't use it"

  genauctionitems:
    ops:
      generate-item:
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        path: ["regions", "africa", "item"]
        attrs:
          { id: "item{{Identity()}}",
          }
        children:
          { location: "{{CountryNames()}}",
            quantity: "{item_quantity}",
            name: "{item_name}",
            payment: "{payment_options}",
            shipping: "{shipping_options}",
          }
        ratio: 4
        op: >2
          "generate item op - required by the system - we don't use it"

      generate-mail:
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        path: ["regions", "africa", "item", "mailbox", "mail"]
        children:
          {
            from: "{{FullNames()}}",
            to: "{{Add(-1); FullNames()}}",
            date: "{email_date}",
            text: "{{Shakespeare()}}"
          }
        ratio: 4
        op: >2
          "generate mail op - required by the system - we don't use it"

  read:
    ops:
      read-document: >2
        {
          find: "<<collection:crud_basic>>",
          filter: { _id: "{random_key}" }
        }        

  update:
    ops:
      update-document: >2
        {
          update: "<<collection:crud_basic>>",
          writeConcern: { w: "majority" },
          updates: [
            {
              q: { _id: "{random_key}" },
              u: {
                "_id":          "{seq_key}",
                "user_id":      "{user_id}",
                "created_on":   {created_on},
                "gender":       "{gender}",
                "full_name":    "{full_name}",
                "married":      {married},
                "address": {
                  "primary": {
                    "city":   "{city}",
                    "cc":     "{country_code}"
                  },
                  "secondary":  {}
                },
                "coordinates": [
                  {lat},
                  {lng}
                ],
                "children": [],
                "friends": [
                  "{friend_id}"
                ],
                "debt": null
              }
            }
          ]
        }        

  delete:
    ops:
      delete-document: >2
        {
          delete: "<<collection:crud_basic>>",
          deletes: [
            {
              q: { _id: "{seq_key}" },
              limit: 1
            }
          ]
        }