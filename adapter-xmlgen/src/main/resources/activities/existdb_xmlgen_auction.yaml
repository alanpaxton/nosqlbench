description: |
  This workload generates XML documents in bulk for loading into a DB.
  It mimics the auction site generated by https://www.researchgate.net/publication/2539045_XMark_A_benchmark_for_XML_data_management

scenarios:
  xmlgen:
    genitems:    run driver=xmlgen tags==block:"genauctionitems.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) seq=interval threads=auto errors=timer,warn directorypath=./target/xml-generated-items xmlroot=site
    genpeople:    run driver=xmlgen tags==block:"genauctionpeople.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) seq=interval threads=auto errors=timer,warn directorypath=./target/xml-generated-people xmlroot=site
    gencategories:    run driver=xmlgen tags==block:"genauctioncategories.*", cycles===TEMPLATE(write-cycles,TEMPLATE(categoriescount,1000)) seq=interval threads=auto errors=timer,warn directorypath=./target/xml-generated-categories xmlroot=site

bindings:
  # The native FullNames() method doesn't give us the same last name as LastNames()
  full_name: ListSized(FixedValue(2), FirstNames(), LastNames()); Join(' ')
  last_name: LastNames()
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String

  # For people / person generation
  #
  email: ListFunctions(LastNames(), FixedValue("@"), AlphaNumericString(4), FixedValue("."), WeightedStrings('com:10;org:8;co.uk:1')); Join('')
  homepage: ListStepped(FixedValue("https://www."), WeightedStrings('geocities:1,yahoo:2'), FixedValue("."), WeightedStrings('com:10;org:8;co.uk:1')); Join('')
  street: ListStepped(ToString(Uniform(1,10000)), Counties(), WeightedStrings('Street:3,Road:2')); Join(' ')

  # Select the file (identifier) to write an element to
  #
  # distribute generated XML over 1000 files, weighted heavily to the first few
  # via use of the exponential. With a rate parameter of 0.01, (mean == 1/rate == 100)
  # PD (probability density) for x=10 tells us 9.5% of data lands in the first 10 files
  # PD x=1 -> 0.01, x=10 -> 0.095, x=100 -> 0.632, x=1000 -> 0.9999
  xml_file_id: Exponential(100); ModuloToLong(1000)
  # file id of the previous generated element
  prev_file_id: Add(-1); Exponential(100); ModuloToLong(1000)

  # For item generation
  # The prefixed Add(X) on each ensures that the PRNG starts at a different position for each binding,
  # so we do not see any strange coupling between bindings, (most glaringly) the sizes of different lists
  #
  item_quantity: Add(10); Hash(); Exponential(10); ModuloToLong(10); Add(1)
  item_name: Add(20); ListSizedHashed(Zipf(100,1.2), CitiesByPopulation(), StateNamesByPopulation()); Join(' ')
  payment_options: Add(30); SetSizedHashed(HashRange(1,4),WeightedStrings('Cash:20;Personal check:8;Creditcard:4;Money order:2')); Join(', ')
  item_description_list: Add(40); ListSizedHashed(Zipf(100,1.75), MobyDick())
  item_category_list: Add(50); ListSizedHashed(Zipf(100,1.75), HashRange(1,<<categoriescount:1000>>))
  shipping_options: Add(60); Hash(); WeightedStrings('Will ship only within country:2;Will ship only within country, Buyer pays fixed shipping charges, See description for charges:1;Will ship internationally:1')
  
  # For generation of a variable number of <mailbox><mail> elements inside an item
  # Each of the following generates the same-sized list on the same cycle, uisng HashInterval(0,5)
  # Each of the generated lists is used in a single __foreach to generate the fields of the individual mail records
  #
  email_from_names: Add(70); ListSizedStepped(HashInterval(0,5), Flow(Add(80) -> long, ListFunctions(FirstNames(),FixedValue(" "),LastNames(),FixedValue(" mailto:"), LastNames(), FixedValue("@"), AlphaNumericString(4), FixedValue("."), WeightedStrings('com:10;org:8;co.uk:1')),Join("")))
  email_to_names: Add(70); ListSizedHashed(HashInterval(0,5), Flow(ListFunctions(FirstNames(),FixedValue(" "),LastNames(),FixedValue(" mailto:"), LastNames(), FixedValue("@"), AlphaNumericString(4), FixedValue("."), WeightedStrings('com:10;org:8;co.uk:1')),Join("")))
  email_dates: Add(70); ListSizedHashed(HashInterval(0,5), Flow(Uniform(0,30000000), ToDate(86400000,1440)))
  email_text: Add(70); ListSizedHashed(HashInterval(0,5), WarAndPeace())

  # For category generation
  #
  category_name: Add(100); ListSizedHashed(Zipf(100,1.4), CountryNames()); Join(' ')

  # For person generation
  # 
  # All the Add(X); Rest.. definitions ensure that the hashes used for each individual binding,
  # start at a different offset in the hash cycle, so that there is no (obvious, direct) relationship
  # between any of them.
  #
  profile_education: Add(110); Hash(); WeightedStrings('Other:3,High School:10,College:10,Graduate School:4')
  # 10000 is the range of open auctions - can we reference another binding in this binding ?
  auction_ref : Add(120); ListSizedStepped(HashRange(0,10),HashRange(1,10000))
  # 1000 categories
  category_ref : Add(130); ListSizedStepped(HashRange(0,10),HashRange(1,1000))
  cc_num : Add(140); ListSizedStepped(FixedValue(4),HashRange(1000,9999)); Join(' ')
  phone_num : Add(150); ListSizedStepped(FixedValue(11),HashRange(0,9)); Join('')

  # generate an optional value by generating a list of 0 or 1 size,
  # then use that to generate as many elements as there are entries in the list..
  #
  optional_age: Add(2047); ListSizedStepped(HashRange(2), HashRange(18,100))
  optional_profile: Add(4095); ListSized(HashRange(2), FixedValue(1))
  
blocks:

  genauctioncategories:
    ops:
      generate-category:
        file: "{xml_file_id}"
        path: ["categories", "category"]
        __attrs: {
          id: "category{{Identity()}}"
        }
        __children: {
          name: "{category_name}",
          description: {
              text: "{{MobyDick()}}"
            }
        }
        op: >2
          "generate category op - required by the system - we don't use it"

  genauctionpeople:
    ops:
      generate-person:
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        path: ["people", "person"]
        __attrs:
          { id: "person{{Identity()}}",
            city: "{{CitiesByPopulation()}}"
          }
        __children: {
          name: "{full_name}",
          emailaddress: "{email}",
          phone: "{phone_num}",
          homepage: "{homepage}/{last_name}",
          creditcard: "{cc_num}",
          address: {
            street: "{street}",
            city: "{{CitiesByPopulation()}}",
            county: "{{CountiesByPopulation()}}",
            zipcode: "{{ZipCodesByPopulation()}}"
          },
          profile:
          {
            __foreach: [profile_opt, "{optional_profile}"],
            __attrs: {
              income: "{{HashRange(1000000,10000000); ToDouble(); Div(100.0)}}"
            },
            # a list of <interest>, each with a category attribute
            interest: {
              __foreach: {cat_val: "{category_ref}"},
              __attrs: { category: "category[cat_val]" }
            },
            education: "{profile_education}",
            business: "{{WeightedStrings('Yes:1,No:2')}}",
            age: "{optional_age}"
          },
          watches: {
            # a list of <watch>, each with an open_auction attribute
            watch: {
              __foreach: [auction_val, "{auction_ref}"],
              __attrs: {
                open_auction: "open_auction[auction_val]"
              }
            }
          }
        }
        op: >2
          "generate person op - required by the system - we don't use it"

  genauctionitems:
    ops:
      generate-item:
        cycle: "{{Identity()}}"
        file: "{xml_file_id}"
        path: ["regions", "africa", "item"]
        __attrs:
          { id: "item{{Identity()}}",
          }
        __children:
          { location: "{{CountryNames()}}",
            quantity: "{item_quantity}",
            name: "{item_name}",
            payment: "{payment_options}",
            description: {
              parlist: {
                listitem: {
                  __foreach: {description_val: "{item_description_list}"},
                  text: "[description_val]"
                }
              }
            },
            shipping: "{shipping_options}",
            incategory: {
              __foreach: [cat_val, "{item_category_list}"],
              __attrs: {
                category: "category[cat_val]"
              }
            },
            mailbox: {
              mail: {
                __foreach: {
                  from: "{email_from_names}",
                  to: "{email_to_names}",
                  date: "{email_dates}",
                  text: "{email_text}"
                },              
                from: "[from]",
                to: "[to]",
                date: "[date]",
                text: "[text]"
              }
            }
          }
        ratio: 1
        op: >2
          "generate item op - required by the system - we don't use it"



